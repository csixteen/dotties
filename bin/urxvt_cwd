#!/usr/bin/env bash
# -----------------
# Copyright : (c) 2021, Pedro Rodrigues <csixteen@protonmail.com>
# License   : MIT

set -eu -o pipefail -o errexit -o nounset

#
# The idea is to find the PID of the terminal currently with focus.
# Having the PID of the terminal, we can use `pstree` to find the last
# child process of the terminal window's process. Having the PID of the
# last child process, we then try and retrieve its current working
# directory. Finally, if we successfully retrieve the cwd of the last
# child process of the currently focused terminal, we `cd` into that
# directory and open `urxvt` from there.

CMD=urxvt
CWD=~

function check_or_die {
        if ! command -v "$1" &> /dev/null ; then
                echo "Couldn't find [$1]. Perhaps you need to install it?"
                $CMD -cd $CWD
                exit 1
        fi
}

function echo_or_die {
        echo $1
        $CMD -cd $CWD
        exit 2
}

check_or_die xdpyinfo
check_or_die xprop
check_or_die pstree

FOCUSED_WINDOW_ID=$(xdpyinfo | grep focus | awk '{ print $3 }')
if [[ -z "$FOCUSED_WINDOW_ID" ]]; then
        echo_or_die "Can't get focused window ID"
fi

FOCUSED_WINDOW_NAME=$(xprop -id $FOCUSED_WINDOW_ID | grep -m 1 _NET_WM_NAME | sed -re 's/"//g' | awk '{ print $3 }')
if [[ $FOCUSED_WINDOW_NAME == "i3" ]]; then
        echo_or_die "No focused window on current workspace"
fi

FOCUSED_WINDOW_PID=$(xprop -id $FOCUSED_WINDOW_ID | grep -m 1 PID | awk '{ print $3 }')
if [[ -z "$FOCUSED_WINDOW_PID" ]]; then
        echo_or_die "Can't get focused window PID"
fi

TREE=$(pstree -lpA $FOCUSED_WINDOW_PID)
if [[ -z "$TREE" ]]; then
        echo_or_die "Can't retrieve process tree from focused window"
fi

LAST_CHILD_PID=$(echo $TREE | sed -re 's/\-{3}/ /g' | awk '{ print $NF }' | sed -re 's/[^0-9]//g')
if [[ -z "$LAST_CHILD_PID" ]]; then
        echo_or_die "Can't get PID of last child process"
fi

if [[ -e "/proc/$LAST_CHILD_PID/cwd" ]]; then
        CWD=$(readlink /proc/$LAST_CHILD_PID/cwd)
fi

$CMD -cd $CWD
